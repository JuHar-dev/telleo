// Mocks generated by Mockito 5.0.16 from annotations
// in telleo/test/application/blocs/auth/auth_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:telleo/domain/change_notifier.dart' as _i9;
import 'package:telleo/domain/core/async_value.dart' as _i3;
import 'package:telleo/domain/user/user_entity.dart' as _i7;
import 'package:telleo/domain/user/user_failures.dart' as _i6;
import 'package:telleo/domain/user/user_repository.dart' as _i4;
import 'package:telleo/domain/user/user_state.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeAsyncValue_1<T> extends _i1.Fake implements _i3.AsyncValue<T> {}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i4.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<
      _i2.Either<_i6.UserFailure,
          _i2.Option<_i7.UserEntity>>> getCurrentUser() => (super.noSuchMethod(
      Invocation.method(#getCurrentUser, []),
      returnValue:
          Future<_i2.Either<_i6.UserFailure, _i2.Option<_i7.UserEntity>>>.value(
              _FakeEither_0<_i6.UserFailure, _i2.Option<_i7.UserEntity>>())) as _i5
      .Future<_i2.Either<_i6.UserFailure, _i2.Option<_i7.UserEntity>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserState].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserState extends _i1.Mock implements _i8.UserState {
  MockUserState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AsyncValue<_i2.Option<_i7.UserEntity>> get value =>
      (super.noSuchMethod(Invocation.getter(#value),
              returnValue: _FakeAsyncValue_1<_i2.Option<_i7.UserEntity>>())
          as _i3.AsyncValue<_i2.Option<_i7.UserEntity>>);
  @override
  _i3.AsyncValue<_i2.Option<_i7.UserEntity>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeAsyncValue_1<_i2.Option<_i7.UserEntity>>())
          as _i3.AsyncValue<_i2.Option<_i7.UserEntity>>);
  @override
  void update(_i3.AsyncValue<_i2.Option<_i7.UserEntity>>? value) =>
      super.noSuchMethod(Invocation.method(#update, [value]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> load() => (super.noSuchMethod(Invocation.method(#load, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  _i9.RemoveListener addListener(
          _i9.Listener<_i3.AsyncValue<_i2.Option<_i7.UserEntity>>>? listener) =>
      (super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValue: () {}) as _i9.RemoveListener);
  @override
  String toString() => super.toString();
}
